name: Check Linked Issues

on:
  workflow_call:

jobs:
  mark:
    name: Check Linked Issues
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT }}
          script: |
              const reportMarker = '<!--Issue Marker Checker-->';

              const linkRegex = /(?:(?<owner>[A-Za-z0-9]+(?:-[A-Za-z0-9]+)?)\/(?<repo>[A-Za-z0-9-._]+))?#(?<issue>\d+)/ig;

              const issueRegex = /https:\/\/api\.github\.com\/repos\/(?<repository>.+?)\/issues\/\d+/;

              const prNumber = context.payload.pull_request.number;

              const pullRequest = (await github.rest.issues.get({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber })).data;

              let body = pullRequest.body ?? '';

              const markerComments = [];

              if (pullRequest.comments > 0) {

                let count = 0;

                let page = 1;

                while (count < pullRequest.comments) {

                  const comments = (await github.rest.issues.listComments({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, page, per_page: 100 })).data;

                  markerComments.push(...comments.filter(c => c.body.startsWith(reportMarker)));

                  body += comments.filter(c => !c.body.startsWith(reportMarker)).map(comment => comment.body ?? '').join(' ');

                  page++;

                  count += comments.length;
                }
              }

              const owner = context.repo.owner;

              const repo = context.repo.repo;

              const links = [...body.matchAll(linkRegex)].map(link => link.groups)

                .filter((link, i, all) => all.findIndex(l => `${link.owner?.toLowerCase() ?? owner}/${link.repo?.toLowerCase() ?? repo}#${link.issue}` === `${l.owner?.toLowerCase() ?? owner}/${l.repo?.toLowerCase() ?? repo}#${l.issue}`) === i)

                .map(link => ({ ...link, owner: link.owner ?? owner, repo: link.repo ?? repo}));

              console.log(links);

              const issues = [];

              for (const link of links) {

                try {

                  const issue = (await github.rest.issues.get({ owner: link.owner, repo: link.repo, issue_number: +link.issue })).data;

                  const { repository } = issue.url.match(issueRegex).groups;

                  issues.push({ id: `${repository}#${link.issue}`, labels: issue.labels.map(label => (typeof(label) === 'string' ? label : label.name) ?? ''), open: issue.state !== 'closed', pr: issue.pull_request != null });

                } catch (e) { console.log(e); }
              }

              for (const comment of markerComments) {

                try {

                  await github.rest.issues.deleteComment({ owner: context.repo.owner, repo: context.repo.repo, issue_numberL: prNumber, comment_id: comment.id });

                } catch (e) { console.log(e); }
              }

              let markdown = '';

              if (issues.length === 0 || issues.every(i => i.labels.some(l => ['beta', 'production'].includes(l)) || !i.open || i.pr)) {

                markdown = `${reportMarker}⚠️⚠️<b>No issues to be marked!</b>⚠️⚠️\n@${pullRequest.user.login}, please link the related issues <b>(if any)</b> either like \`#123\` for current repository or \`NoorDigitalAgency/repository-name#456\` for cross-repository issues.\n\n🗑️<b>Invalid links:</b>\n`;

                if (issues.length > 0) {

                  markdown += issues.reduce((previous, current, index) => `${previous}\n${index + 1}. ~~${current.id}~~ ${current.pr ? ' (🛑 pull request)' : !current.open ? ' (📕 closed)' : `🏷️ labeled \`${current.labels.includes('beta') ? 'beta' : 'production'}\``}`, '');
                }

              } else {

                let markedInvalids = false;

                markdown = `${reportMarker}✅<b>Issues to be marked:</b>\n- @${pullRequest.user.login}, check the detected linked issues.\n${issues

                    .sort((a,b) => (!a.pr && a.open && a.labels.every(l => !['beta', 'production'].includes(l))) === (!b.pr && b.open && b.labels.every(l => !['beta', 'production'].includes(l))) ? 0 : (!a.pr && a.open && a.labels.every(l => !['beta', 'production'].includes(l))) ? -1 : 0)

                    .reduce((previous, current, index) =>

                {

                  let line = `${current.id}`;

                  let shouldMark = false;

                  if (current.pr || !current.open || current.labels.some(l => ['beta', 'production'].includes(l))) {

                    shouldMark = !markedInvalids;

                    markedInvalids = true;

                    line = `~~${line}~~ ${current.pr ? ' (🛑 pull request)' : !current.open ? ' (📕 closed)' : `🏷️ labeled \`${current.labels.includes('beta') ? 'beta' : 'production'}\``}`;

                  } else if (current.labels.includes('alpha')) {

                    line += ' (⚠️ re-linking already `alpha`)';
                  }

                  return `${previous}\n${shouldMark ? '---\n' : ''}${index + 1}. ${line}`;

                }, '')}`;
              }

              await github.rest.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, body: markdown});
