name: .NET Test Job

on:
  workflow_call:
    inputs:
      stage:
        description: Current stage name
        required: true
        type: string

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    environment: ${{ inputs.stage }}

    # Note: Local SQL Server for DB tests
    services:
      sql-server:
        image: noorteam/mssql-docker:2019-focal
        ports:
          - 1433:1433
        env:
          DATABASE_USERNAME: user
          DATABASE_NAMES: database # Note: You can add multiple databases like 'postnoor, golight, lynx'
        options: --health-cmd sqlserver_isready

    steps:
      - if: github.event_name != 'pull_request'
        uses: NoorDigitalAgency/release-lookup@main
        with:
          token: ${{ secrets.PAT }}

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name != 'pull_request' && env.RELEASE_REFERENCE || github.event.pull_request.head.ref }}
          submodules: recursive
          token: ${{ secrets.PAT }}

      - uses: actions/setup-dotnet@v2
        with:
          source-url: https://nuget.pkg.github.com/noordigitalagency/index.json
          dotnet-version: '6.0.x'
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.PAT }}

      - uses: dopplerhq/cli-action@v1

      # TODO: Change the 'cd .' command to point to the directory where the appsettings files exist
      - run: |
          cd .
          [ '${{ inputs.stage }}' == 'alpha' ] && doppler secrets substitute appsettings.develop.json.tmpl --output appsettings.develop.json || \
          [ '${{ inputs.stage }}' == 'beta' ] && doppler secrets substitute appsettings.release.json.tmpl --output appsettings.release.json || \
          [ '${{ inputs.stage }}' == 'production' ] && doppler secrets substitute appsettings.json.production.tmpl --output appsettings.production.json
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

      # TODO: If needed, change the 'cd .' command to either where the solution is located or where the tests project is located
      - id: test
        run: |
          # Tip: Add extra nuget sources like 'dotnet nuget add source https://www.myget.org/F/cachemanager/api/v3/index.json -n myget'
          cd .
          path="$(pwd)/test-results" && echo "::set-output name=path::$path"
          dotnet test --logger "trx;logfilename=$path/test-reports.trx"

      - run: |
          path="${{ steps.test.outputs.path }}"
          [ -f "$path/test-reports.trx" ] && \
            dotnet tool install --global --prerelease LiquidTestReports.Cli && \
            liquid --inputs "File=$path/test-reports.trx;Format=Trx" --output-file "$path/test-reports.md" && \
            cat "$path/test-reports.md" >> $GITHUB_STEP_SUMMARY || \
            echo "::warning::No Unit Tests where found in the project!"
